## Transformer Configuration

## Inspired by the Google setup
## from https://opennmt.net/OpenNMT-py/FAQ.html#how-do-i-train-the-transformer-model

## Where the samples will be written
save_data: ../output/nmt/run/transformer

## Where the vocab(s) will be written
src_vocab: ../output/nmt/run/transformer.vocab.src
tgt_vocab: ../output/nmt/run/transformer.vocab.tgt

# Prevent overwriting existing files in the folder
overwrite: True

# Corpus opts:
data:
  corpus_1:
    path_src: ../output/nmt/src-train.txt
    path_tgt: ../output/nmt/tgt-train.txt
    weight: 1
  valid:
    path_src: ../output/nmt/src-val.txt
    path_tgt: ../output/nmt/tgt-val.txt

# --------------------------------------------------------------------------

# General opts
save_model: ../output/nmt/run/transformer_model
save_checkpoint_steps: 5000
warmup_steps: 4000
valid_steps: 5000
train_steps: 200000

# Batching
bucket_size: 10000
world_size: 1
gpu_ranks: [0]
num_workers: 8
batch_type: "tokens"
batch_size: 64
valid_batch_size: 128
accum_count: [1]

# Optimization
model_dtype: "fp16"
optim: adam
weight_decay: 0.0001
learning_rate: 1
decay_method: "noam"
adam_beta2: 0.998
learning_rate_decay: 0.95
decay_steps: 10000
max_grad_norm: 5
label_smoothing: 0.05
param_init: 0
param_init_glorot: true
normalization: "tokens"

# Model hyperparameters
encoder_type: transformer
decoder_type: transformer
position_encoding: true
max_relative_positions: 10
enc_layers: 4
dec_layers: 4
heads: 4
hidden_size: 256
word_vec_size: 256
transformer_ff: 2048
dropout: [0.3]
attention_dropout: [0.3]

beam_size: 5
length_penalty: 1.0
