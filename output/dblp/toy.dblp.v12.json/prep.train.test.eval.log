/Users/hfani/Github/fani-lab/OpeNTF/main/opentf_venv/bin/python /Users/hfani/Github/fani-lab/OpeNTF/main/src/main.py ~data.filter
[2025-06-21 04:54:30,605][cmn.team][INFO] - Loading teamsvecs matrices from ../output/dblp/toy.dblp.v12.json/teamsvecs.pkl ...
[2025-06-21 04:54:30,606][cmn.team][INFO] - Teamsvecs matrices and/or indexes not found! Generating ...
[2025-06-21 04:54:30,606][cmn.team][INFO] - Loading indexes pickle from ../output/dblp/toy.dblp.v12.json/indexes.pkl ...
[2025-06-21 04:54:30,606][cmn.publication][INFO] - Pickles not found! Reading raw data from ../data/dblp/toy.dblp.v12.json (progress in bytes) ...
100%|█████████▉| 46664/46688 [00:00<00:00, 7842723.27it/s]
Indexing members ...
Indexing skills ...
Indexing teams ...
Indexing locations ...
[2025-06-21 04:54:30,622][cmn.team][INFO] - Teams and indexes are pickled into ../output/dblp/toy.dblp.v12.json
[2025-06-21 04:54:32,144][cmn.team][INFO] - Teamsvecs matrices for skills (31, 10), members (31, 13), and locations (31, 29) saved at ../output/dblp/toy.dblp.v12.json/teamsvecs.pkl
[2025-06-21 04:54:32,144][__main__][INFO] - Loading splits from ../output/dblp/toy.dblp.v12.json/splits.pkl ...
[2025-06-21 04:54:32,563][__main__][INFO] - Splits file not found! Generating ...
[2025-06-21 04:54:32,564][cmn.team][INFO] - Loading member-skill co-occurrence matrix (13, 10) from ../output/dblp/toy.dblp.v12.json/skillcoverage.pkl ...
[2025-06-21 04:54:32,564][cmn.team][INFO] - Member-skill co-occurrence matrix not found! Generating ...
[2025-06-21 04:54:32,565][cmn.team][INFO] - Member-skill co-occurrence matrix (13, 10) saved at ../output/dblp/toy.dblp.v12.json/skillcoverage.pkl.
[2025-06-21 04:54:33,502][__main__][INFO] - Training team recommender instance mdl.rnd.Rnd ...
[2025-06-21 04:54:33,502][__main__][INFO] - Testing team recommender instance mdl.rnd.Rnd ...
[2025-06-21 04:54:33,518][mdl.rnd][INFO] - rnd model predictions for fold0.test. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.test.pred
[2025-06-21 04:54:33,519][mdl.rnd][INFO] - rnd model predictions for fold1.test. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.test.pred
[2025-06-21 04:54:33,520][mdl.rnd][INFO] - rnd model predictions for fold2.test. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.test.pred
[2025-06-21 04:54:33,524][mdl.rnd][INFO] - rnd model predictions for fold0.train. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.train.pred
[2025-06-21 04:54:33,526][mdl.rnd][INFO] - rnd model predictions for fold1.train. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.train.pred
[2025-06-21 04:54:33,532][mdl.rnd][INFO] - rnd model predictions for fold2.train. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.train.pred
[2025-06-21 04:54:33,534][mdl.rnd][INFO] - rnd model predictions for fold0.valid. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.valid.pred
[2025-06-21 04:54:33,536][mdl.rnd][INFO] - rnd model predictions for fold1.valid. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.valid.pred
[2025-06-21 04:54:33,537][mdl.rnd][INFO] - rnd model predictions for fold2.valid. has saved at ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.valid.pred
[2025-06-21 04:54:33,537][__main__][INFO] - Evaluating team recommender instance mdl.rnd.Rnd ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 6683.08it/s]
[2025-06-21 04:54:33,773][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:33,778][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,780][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:33,784][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,786][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 780.63it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7875.15it/s]
100%|██████████| 5/5 [00:00<00:00, 806.44it/s]
[2025-06-21 04:54:33,794][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.test.pred.eval.mean.csv
[2025-06-21 04:54:33,795][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:33,797][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,797][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:33,799][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,800][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:33,808][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.test.pred.eval.mean.csv
[2025-06-21 04:54:33,808][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:33,813][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,813][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:33,814][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,815][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7801.90it/s]
100%|██████████| 5/5 [00:00<00:00, 817.28it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9238.56it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:33,823][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.test.pred.eval.mean.csv
[2025-06-21 04:54:33,825][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/rnd.b128/test.pred.eval.mean.csv
[2025-06-21 04:54:33,826][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:33,827][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,827][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:33,830][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,831][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 849.58it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9681.35it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:33,853][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.train.pred.eval.mean.csv
[2025-06-21 04:54:33,854][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:33,855][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,855][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:33,858][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,859][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 878.01it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9682.89it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:33,880][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.train.pred.eval.mean.csv
[2025-06-21 04:54:33,880][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:33,881][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,882][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:33,884][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,885][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 882.40it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9080.76it/s]
100%|██████████| 9/9 [00:00<00:00, 875.50it/s]
[2025-06-21 04:54:33,907][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.train.pred.eval.mean.csv
[2025-06-21 04:54:33,909][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/rnd.b128/train.pred.eval.mean.csv
[2025-06-21 04:54:33,911][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:33,912][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,912][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:33,913][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,914][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:33,927][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f0.valid.pred.eval.mean.csv
[2025-06-21 04:54:33,928][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:33,938][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,938][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:33,940][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,943][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 8823.92it/s]
100%|██████████| 9/9 [00:00<00:00, 840.26it/s]
[2025-06-21 04:54:33,974][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f1.valid.pred.eval.mean.csv
[2025-06-21 04:54:33,980][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:33,985][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:33,985][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:33,987][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:33,988][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 7858.18it/s]
100%|██████████| 8/8 [00:00<00:00, 830.23it/s]
[2025-06-21 04:54:34,002][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/rnd.b128/f2.valid.pred.eval.mean.csv
[2025-06-21 04:54:34,006][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/rnd.b128/valid.pred.eval.mean.csv
[2025-06-21 04:54:34,021][__main__][INFO] - Training team recommender instance mdl.fnn.Fnn ...
/Users/hfani/Github/fani-lab/OpeNTF/main/opentf_venv/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:60: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.
  warnings.warn(
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/fnn.py:76: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.unigram = Ntf.torch.tensor(y.sum(axis=0) / y.shape[0]).to(self.device)  # frequency of each expert in a batch
[2025-06-21 04:54:34,530][mdl.fnn][INFO] - Fold 0/2, Epoch 0, Train Loss: 1044.0804
[2025-06-21 04:54:34,530][mdl.fnn][INFO] - Fold 0/2, Epoch 0, Valid Loss: 554.4274
[2025-06-21 04:54:34,532][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e0.pt
[2025-06-21 04:54:34,533][mdl.fnn][INFO] - Validation loss decreased (inf --> 554.427368)
[2025-06-21 04:54:34,535][mdl.fnn][INFO] - Fold 0/2, Epoch 1, Train Loss: 1039.8380
[2025-06-21 04:54:34,535][mdl.fnn][INFO] - Fold 0/2, Epoch 1, Valid Loss: 551.3207
[2025-06-21 04:54:34,537][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e1.pt
[2025-06-21 04:54:34,537][mdl.fnn][INFO] - Validation loss decreased (554.427368 --> 551.320740)
[2025-06-21 04:54:34,539][mdl.fnn][INFO] - Fold 0/2, Epoch 2, Train Loss: 1033.1349
[2025-06-21 04:54:34,539][mdl.fnn][INFO] - Fold 0/2, Epoch 2, Valid Loss: 549.5076
[2025-06-21 04:54:34,541][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e2.pt
[2025-06-21 04:54:34,541][mdl.fnn][INFO] - Validation loss decreased (551.320740 --> 549.507568)
[2025-06-21 04:54:34,545][mdl.fnn][INFO] - Fold 0/2, Epoch 3, Train Loss: 1028.3298
[2025-06-21 04:54:34,545][mdl.fnn][INFO] - Fold 0/2, Epoch 3, Valid Loss: 547.2625
[2025-06-21 04:54:34,547][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e3.pt
[2025-06-21 04:54:34,547][mdl.fnn][INFO] - Validation loss decreased (549.507568 --> 547.262451)
[2025-06-21 04:54:34,550][mdl.fnn][INFO] - Fold 0/2, Epoch 4, Train Loss: 1024.9573
[2025-06-21 04:54:34,550][mdl.fnn][INFO] - Fold 0/2, Epoch 4, Valid Loss: 547.7766
[2025-06-21 04:54:34,552][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e4.pt
[2025-06-21 04:54:34,552][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:34,554][mdl.fnn][INFO] - Fold 0/2, Epoch 5, Train Loss: 1024.2507
[2025-06-21 04:54:34,554][mdl.fnn][INFO] - Fold 0/2, Epoch 5, Valid Loss: 545.8410
[2025-06-21 04:54:34,556][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e5.pt
[2025-06-21 04:54:34,556][mdl.fnn][INFO] - Validation loss decreased (547.262451 --> 545.841003)
[2025-06-21 04:54:34,559][mdl.fnn][INFO] - Fold 0/2, Epoch 6, Train Loss: 1020.3563
[2025-06-21 04:54:34,559][mdl.fnn][INFO] - Fold 0/2, Epoch 6, Valid Loss: 544.7428
[2025-06-21 04:54:34,561][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e6.pt
[2025-06-21 04:54:34,561][mdl.fnn][INFO] - Validation loss decreased (545.841003 --> 544.742798)
[2025-06-21 04:54:34,563][mdl.fnn][INFO] - Fold 0/2, Epoch 7, Train Loss: 1019.2218
[2025-06-21 04:54:34,563][mdl.fnn][INFO] - Fold 0/2, Epoch 7, Valid Loss: 546.1483
[2025-06-21 04:54:34,565][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e7.pt
[2025-06-21 04:54:34,565][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:34,568][mdl.fnn][INFO] - Fold 0/2, Epoch 8, Train Loss: 1018.6478
[2025-06-21 04:54:34,568][mdl.fnn][INFO] - Fold 0/2, Epoch 8, Valid Loss: 545.8292
[2025-06-21 04:54:34,570][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e8.pt
[2025-06-21 04:54:34,570][mdl.fnn][INFO] - EarlyStopping counter: 2 out of 5
[2025-06-21 04:54:34,573][mdl.fnn][INFO] - Fold 0/2, Epoch 9, Train Loss: 1016.8165
[2025-06-21 04:54:34,573][mdl.fnn][INFO] - Fold 0/2, Epoch 9, Valid Loss: 543.2291
[2025-06-21 04:54:34,575][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.e9.pt
[2025-06-21 04:54:34,575][mdl.fnn][INFO] - Validation loss decreased (544.742798 --> 543.229126)
[2025-06-21 04:54:34,576][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.pt
[2025-06-21 04:54:34,580][mdl.fnn][INFO] - Fold 1/2, Epoch 0, Train Loss: 1047.7881
[2025-06-21 04:54:34,580][mdl.fnn][INFO] - Fold 1/2, Epoch 0, Valid Loss: 550.7849
[2025-06-21 04:54:34,582][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e0.pt
[2025-06-21 04:54:34,582][mdl.fnn][INFO] - Validation loss decreased (inf --> 550.784851)
[2025-06-21 04:54:34,584][mdl.fnn][INFO] - Fold 1/2, Epoch 1, Train Loss: 1043.1171
[2025-06-21 04:54:34,584][mdl.fnn][INFO] - Fold 1/2, Epoch 1, Valid Loss: 547.1227
[2025-06-21 04:54:34,586][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e1.pt
[2025-06-21 04:54:34,586][mdl.fnn][INFO] - Validation loss decreased (550.784851 --> 547.122742)
[2025-06-21 04:54:34,589][mdl.fnn][INFO] - Fold 1/2, Epoch 2, Train Loss: 1040.7516
[2025-06-21 04:54:34,589][mdl.fnn][INFO] - Fold 1/2, Epoch 2, Valid Loss: 545.9006
[2025-06-21 04:54:34,590][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e2.pt
[2025-06-21 04:54:34,590][mdl.fnn][INFO] - Validation loss decreased (547.122742 --> 545.900635)
[2025-06-21 04:54:34,593][mdl.fnn][INFO] - Fold 1/2, Epoch 3, Train Loss: 1036.4404
[2025-06-21 04:54:34,593][mdl.fnn][INFO] - Fold 1/2, Epoch 3, Valid Loss: 542.0082
[2025-06-21 04:54:34,595][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e3.pt
[2025-06-21 04:54:34,595][mdl.fnn][INFO] - Validation loss decreased (545.900635 --> 542.008240)
[2025-06-21 04:54:34,597][mdl.fnn][INFO] - Fold 1/2, Epoch 4, Train Loss: 1030.2324
[2025-06-21 04:54:34,598][mdl.fnn][INFO] - Fold 1/2, Epoch 4, Valid Loss: 543.2330
[2025-06-21 04:54:34,599][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e4.pt
[2025-06-21 04:54:34,599][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:34,601][mdl.fnn][INFO] - Fold 1/2, Epoch 5, Train Loss: 1029.4669
[2025-06-21 04:54:34,602][mdl.fnn][INFO] - Fold 1/2, Epoch 5, Valid Loss: 541.3572
[2025-06-21 04:54:34,603][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e5.pt
[2025-06-21 04:54:34,603][mdl.fnn][INFO] - Validation loss decreased (542.008240 --> 541.357178)
[2025-06-21 04:54:34,606][mdl.fnn][INFO] - Fold 1/2, Epoch 6, Train Loss: 1029.0189
[2025-06-21 04:54:34,606][mdl.fnn][INFO] - Fold 1/2, Epoch 6, Valid Loss: 542.7755
[2025-06-21 04:54:34,608][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e6.pt
[2025-06-21 04:54:34,608][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:34,612][mdl.fnn][INFO] - Fold 1/2, Epoch 7, Train Loss: 1026.0972
[2025-06-21 04:54:34,613][mdl.fnn][INFO] - Fold 1/2, Epoch 7, Valid Loss: 538.9820
[2025-06-21 04:54:34,614][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e7.pt
[2025-06-21 04:54:34,614][mdl.fnn][INFO] - Validation loss decreased (541.357178 --> 538.981995)
[2025-06-21 04:54:34,617][mdl.fnn][INFO] - Fold 1/2, Epoch 8, Train Loss: 1022.1572
[2025-06-21 04:54:34,617][mdl.fnn][INFO] - Fold 1/2, Epoch 8, Valid Loss: 536.6650
[2025-06-21 04:54:34,619][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e8.pt
[2025-06-21 04:54:34,619][mdl.fnn][INFO] - Validation loss decreased (538.981995 --> 536.664978)
[2025-06-21 04:54:34,621][mdl.fnn][INFO] - Fold 1/2, Epoch 9, Train Loss: 1019.9476
[2025-06-21 04:54:34,621][mdl.fnn][INFO] - Fold 1/2, Epoch 9, Valid Loss: 535.3301
[2025-06-21 04:54:34,623][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.e9.pt
[2025-06-21 04:54:34,623][mdl.fnn][INFO] - Validation loss decreased (536.664978 --> 535.330078)
[2025-06-21 04:54:34,624][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.pt
[2025-06-21 04:54:34,628][mdl.fnn][INFO] - Fold 2/2, Epoch 0, Train Loss: 1115.5829
[2025-06-21 04:54:34,628][mdl.fnn][INFO] - Fold 2/2, Epoch 0, Valid Loss: 497.7446
[2025-06-21 04:54:34,629][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e0.pt
[2025-06-21 04:54:34,629][mdl.fnn][INFO] - Validation loss decreased (inf --> 497.744629)
[2025-06-21 04:54:34,632][mdl.fnn][INFO] - Fold 2/2, Epoch 1, Train Loss: 1103.8035
[2025-06-21 04:54:34,632][mdl.fnn][INFO] - Fold 2/2, Epoch 1, Valid Loss: 495.4973
[2025-06-21 04:54:34,634][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e1.pt
[2025-06-21 04:54:34,634][mdl.fnn][INFO] - Validation loss decreased (497.744629 --> 495.497253)
[2025-06-21 04:54:34,636][mdl.fnn][INFO] - Fold 2/2, Epoch 2, Train Loss: 1093.3373
[2025-06-21 04:54:34,636][mdl.fnn][INFO] - Fold 2/2, Epoch 2, Valid Loss: 490.8470
[2025-06-21 04:54:34,638][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e2.pt
[2025-06-21 04:54:34,638][mdl.fnn][INFO] - Validation loss decreased (495.497253 --> 490.846985)
[2025-06-21 04:54:34,640][mdl.fnn][INFO] - Fold 2/2, Epoch 3, Train Loss: 1086.3083
[2025-06-21 04:54:34,640][mdl.fnn][INFO] - Fold 2/2, Epoch 3, Valid Loss: 489.1213
[2025-06-21 04:54:34,642][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e3.pt
[2025-06-21 04:54:34,642][mdl.fnn][INFO] - Validation loss decreased (490.846985 --> 489.121338)
[2025-06-21 04:54:34,645][mdl.fnn][INFO] - Fold 2/2, Epoch 4, Train Loss: 1082.1788
[2025-06-21 04:54:34,645][mdl.fnn][INFO] - Fold 2/2, Epoch 4, Valid Loss: 485.4339
[2025-06-21 04:54:34,647][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e4.pt
[2025-06-21 04:54:34,648][mdl.fnn][INFO] - Validation loss decreased (489.121338 --> 485.433899)
[2025-06-21 04:54:34,651][mdl.fnn][INFO] - Fold 2/2, Epoch 5, Train Loss: 1078.5272
[2025-06-21 04:54:34,651][mdl.fnn][INFO] - Fold 2/2, Epoch 5, Valid Loss: 486.3194
[2025-06-21 04:54:34,653][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e5.pt
[2025-06-21 04:54:34,653][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:34,655][mdl.fnn][INFO] - Fold 2/2, Epoch 6, Train Loss: 1076.2866
[2025-06-21 04:54:34,656][mdl.fnn][INFO] - Fold 2/2, Epoch 6, Valid Loss: 484.7031
[2025-06-21 04:54:34,657][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e6.pt
[2025-06-21 04:54:34,657][mdl.fnn][INFO] - Validation loss decreased (485.433899 --> 484.703125)
[2025-06-21 04:54:34,660][mdl.fnn][INFO] - Fold 2/2, Epoch 7, Train Loss: 1072.8370
[2025-06-21 04:54:34,660][mdl.fnn][INFO] - Fold 2/2, Epoch 7, Valid Loss: 483.4770
[2025-06-21 04:54:34,662][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e7.pt
[2025-06-21 04:54:34,662][mdl.fnn][INFO] - Validation loss decreased (484.703125 --> 483.476990)
[2025-06-21 04:54:34,665][mdl.fnn][INFO] - Fold 2/2, Epoch 8, Train Loss: 1069.5269
[2025-06-21 04:54:34,665][mdl.fnn][INFO] - Fold 2/2, Epoch 8, Valid Loss: 481.9403
[2025-06-21 04:54:34,667][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e8.pt
[2025-06-21 04:54:34,667][mdl.fnn][INFO] - Validation loss decreased (483.476990 --> 481.940338)
[2025-06-21 04:54:34,670][mdl.fnn][INFO] - Fold 2/2, Epoch 9, Train Loss: 1066.3735
[2025-06-21 04:54:34,671][mdl.fnn][INFO] - Fold 2/2, Epoch 9, Valid Loss: 482.0555
[2025-06-21 04:54:34,672][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.e9.pt
[2025-06-21 04:54:34,672][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:34,674][mdl.fnn][INFO] - fnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.pt
[2025-06-21 04:54:34,674][__main__][INFO] - Testing team recommender instance mdl.fnn.Fnn ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/fnn.py:185: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.model.load_state_dict(Ntf.torch.load(modelfile)['model_state_dict'])
[2025-06-21 04:54:34,683][mdl.fnn][INFO] - fnn model predictions for fold0.test. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.pred
[2025-06-21 04:54:34,685][mdl.fnn][INFO] - fnn model predictions for fold0.train. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.pred
[2025-06-21 04:54:34,685][mdl.fnn][INFO] - fnn model predictions for fold0.valid. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.pred
[2025-06-21 04:54:34,693][mdl.fnn][INFO] - fnn model predictions for fold0.test.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e5.pred
[2025-06-21 04:54:34,694][mdl.fnn][INFO] - fnn model predictions for fold0.train.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e5.pred
[2025-06-21 04:54:34,695][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e5.pred
[2025-06-21 04:54:34,702][mdl.fnn][INFO] - fnn model predictions for fold0.test.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e1.pred
[2025-06-21 04:54:34,703][mdl.fnn][INFO] - fnn model predictions for fold0.train.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e1.pred
[2025-06-21 04:54:34,704][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e1.pred
[2025-06-21 04:54:34,710][mdl.fnn][INFO] - fnn model predictions for fold0.test.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e0.pred
[2025-06-21 04:54:34,712][mdl.fnn][INFO] - fnn model predictions for fold0.train.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e0.pred
[2025-06-21 04:54:34,713][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e0.pred
[2025-06-21 04:54:34,717][mdl.fnn][INFO] - fnn model predictions for fold0.test.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e4.pred
[2025-06-21 04:54:34,719][mdl.fnn][INFO] - fnn model predictions for fold0.train.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e4.pred
[2025-06-21 04:54:34,720][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e4.pred
[2025-06-21 04:54:34,727][mdl.fnn][INFO] - fnn model predictions for fold0.test.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e9.pred
[2025-06-21 04:54:34,729][mdl.fnn][INFO] - fnn model predictions for fold0.train.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e9.pred
[2025-06-21 04:54:34,730][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e9.pred
[2025-06-21 04:54:34,734][mdl.fnn][INFO] - fnn model predictions for fold0.test.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e8.pred
[2025-06-21 04:54:34,735][mdl.fnn][INFO] - fnn model predictions for fold0.train.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e8.pred
[2025-06-21 04:54:34,736][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e8.pred
[2025-06-21 04:54:34,740][mdl.fnn][INFO] - fnn model predictions for fold0.test.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e3.pred
[2025-06-21 04:54:34,742][mdl.fnn][INFO] - fnn model predictions for fold0.train.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e3.pred
[2025-06-21 04:54:34,743][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e3.pred
[2025-06-21 04:54:34,751][mdl.fnn][INFO] - fnn model predictions for fold0.test.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e7.pred
[2025-06-21 04:54:34,753][mdl.fnn][INFO] - fnn model predictions for fold0.train.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e7.pred
[2025-06-21 04:54:34,754][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e7.pred
[2025-06-21 04:54:34,758][mdl.fnn][INFO] - fnn model predictions for fold0.test.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e6.pred
[2025-06-21 04:54:34,760][mdl.fnn][INFO] - fnn model predictions for fold0.train.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e6.pred
[2025-06-21 04:54:34,760][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e6.pred
[2025-06-21 04:54:34,765][mdl.fnn][INFO] - fnn model predictions for fold0.test.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e2.pred
[2025-06-21 04:54:34,766][mdl.fnn][INFO] - fnn model predictions for fold0.train.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e2.pred
[2025-06-21 04:54:34,767][mdl.fnn][INFO] - fnn model predictions for fold0.valid.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e2.pred
[2025-06-21 04:54:34,775][mdl.fnn][INFO] - fnn model predictions for fold1.test. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.pred
[2025-06-21 04:54:34,776][mdl.fnn][INFO] - fnn model predictions for fold1.train. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.pred
[2025-06-21 04:54:34,777][mdl.fnn][INFO] - fnn model predictions for fold1.valid. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.pred
[2025-06-21 04:54:34,782][mdl.fnn][INFO] - fnn model predictions for fold1.test.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e1.pred
[2025-06-21 04:54:34,783][mdl.fnn][INFO] - fnn model predictions for fold1.train.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e1.pred
[2025-06-21 04:54:34,784][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e1.pred
[2025-06-21 04:54:34,789][mdl.fnn][INFO] - fnn model predictions for fold1.test.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e5.pred
[2025-06-21 04:54:34,790][mdl.fnn][INFO] - fnn model predictions for fold1.train.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e5.pred
[2025-06-21 04:54:34,791][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e5.pred
[2025-06-21 04:54:34,795][mdl.fnn][INFO] - fnn model predictions for fold1.test.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e4.pred
[2025-06-21 04:54:34,797][mdl.fnn][INFO] - fnn model predictions for fold1.train.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e4.pred
[2025-06-21 04:54:34,798][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e4.pred
[2025-06-21 04:54:34,806][mdl.fnn][INFO] - fnn model predictions for fold1.test.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e0.pred
[2025-06-21 04:54:34,807][mdl.fnn][INFO] - fnn model predictions for fold1.train.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e0.pred
[2025-06-21 04:54:34,808][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e0.pred
[2025-06-21 04:54:34,813][mdl.fnn][INFO] - fnn model predictions for fold1.test.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e7.pred
[2025-06-21 04:54:34,814][mdl.fnn][INFO] - fnn model predictions for fold1.train.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e7.pred
[2025-06-21 04:54:34,815][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e7.pred
[2025-06-21 04:54:34,820][mdl.fnn][INFO] - fnn model predictions for fold1.test.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e3.pred
[2025-06-21 04:54:34,821][mdl.fnn][INFO] - fnn model predictions for fold1.train.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e3.pred
[2025-06-21 04:54:34,822][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e3.pred
[2025-06-21 04:54:34,830][mdl.fnn][INFO] - fnn model predictions for fold1.test.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e2.pred
[2025-06-21 04:54:34,832][mdl.fnn][INFO] - fnn model predictions for fold1.train.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e2.pred
[2025-06-21 04:54:34,833][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e2.pred
[2025-06-21 04:54:34,837][mdl.fnn][INFO] - fnn model predictions for fold1.test.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e6.pred
[2025-06-21 04:54:34,838][mdl.fnn][INFO] - fnn model predictions for fold1.train.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e6.pred
[2025-06-21 04:54:34,839][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e6.pred
[2025-06-21 04:54:34,846][mdl.fnn][INFO] - fnn model predictions for fold1.test.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e9.pred
[2025-06-21 04:54:34,847][mdl.fnn][INFO] - fnn model predictions for fold1.train.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e9.pred
[2025-06-21 04:54:34,848][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e9.pred
[2025-06-21 04:54:34,852][mdl.fnn][INFO] - fnn model predictions for fold1.test.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e8.pred
[2025-06-21 04:54:34,853][mdl.fnn][INFO] - fnn model predictions for fold1.train.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e8.pred
[2025-06-21 04:54:34,854][mdl.fnn][INFO] - fnn model predictions for fold1.valid.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e8.pred
[2025-06-21 04:54:34,859][mdl.fnn][INFO] - fnn model predictions for fold2.test. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.pred
[2025-06-21 04:54:34,860][mdl.fnn][INFO] - fnn model predictions for fold2.train. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.pred
[2025-06-21 04:54:34,861][mdl.fnn][INFO] - fnn model predictions for fold2.valid. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.pred
[2025-06-21 04:54:34,865][mdl.fnn][INFO] - fnn model predictions for fold2.test.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e1.pred
[2025-06-21 04:54:34,866][mdl.fnn][INFO] - fnn model predictions for fold2.train.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e1.pred
[2025-06-21 04:54:34,867][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e1. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e1.pred
[2025-06-21 04:54:34,871][mdl.fnn][INFO] - fnn model predictions for fold2.test.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e5.pred
[2025-06-21 04:54:34,872][mdl.fnn][INFO] - fnn model predictions for fold2.train.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e5.pred
[2025-06-21 04:54:34,873][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e5. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e5.pred
[2025-06-21 04:54:34,877][mdl.fnn][INFO] - fnn model predictions for fold2.test.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e4.pred
[2025-06-21 04:54:34,878][mdl.fnn][INFO] - fnn model predictions for fold2.train.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e4.pred
[2025-06-21 04:54:34,879][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e4. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e4.pred
[2025-06-21 04:54:34,886][mdl.fnn][INFO] - fnn model predictions for fold2.test.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e0.pred
[2025-06-21 04:54:34,887][mdl.fnn][INFO] - fnn model predictions for fold2.train.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e0.pred
[2025-06-21 04:54:34,888][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e0. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e0.pred
[2025-06-21 04:54:34,891][mdl.fnn][INFO] - fnn model predictions for fold2.test.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e9.pred
[2025-06-21 04:54:34,893][mdl.fnn][INFO] - fnn model predictions for fold2.train.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e9.pred
[2025-06-21 04:54:34,893][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e9. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e9.pred
[2025-06-21 04:54:34,897][mdl.fnn][INFO] - fnn model predictions for fold2.test.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e8.pred
[2025-06-21 04:54:34,898][mdl.fnn][INFO] - fnn model predictions for fold2.train.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e8.pred
[2025-06-21 04:54:34,899][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e8. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e8.pred
[2025-06-21 04:54:34,905][mdl.fnn][INFO] - fnn model predictions for fold2.test.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e7.pred
[2025-06-21 04:54:34,907][mdl.fnn][INFO] - fnn model predictions for fold2.train.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e7.pred
[2025-06-21 04:54:34,907][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e7. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e7.pred
[2025-06-21 04:54:34,913][mdl.fnn][INFO] - fnn model predictions for fold2.test.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e3.pred
[2025-06-21 04:54:34,915][mdl.fnn][INFO] - fnn model predictions for fold2.train.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e3.pred
[2025-06-21 04:54:34,915][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e3. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e3.pred
[2025-06-21 04:54:34,920][mdl.fnn][INFO] - fnn model predictions for fold2.test.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e2.pred
[2025-06-21 04:54:34,921][mdl.fnn][INFO] - fnn model predictions for fold2.train.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e2.pred
[2025-06-21 04:54:34,922][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e2. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e2.pred
[2025-06-21 04:54:34,927][mdl.fnn][INFO] - fnn model predictions for fold2.test.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e6.pred
[2025-06-21 04:54:34,928][mdl.fnn][INFO] - fnn model predictions for fold2.train.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e6.pred
[2025-06-21 04:54:34,929][mdl.fnn][INFO] - fnn model predictions for fold2.valid.e6. has saved at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e6.pred
[2025-06-21 04:54:34,929][__main__][INFO] - Evaluating team recommender instance mdl.fnn.Fnn ...
[2025-06-21 04:54:34,931][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:34,934][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:34,934][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:34,936][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:34,938][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:34,946][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.pred.eval.mean.csv
[2025-06-21 04:54:34,947][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7418.30it/s]
100%|██████████| 5/5 [00:00<00:00, 784.19it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7562.76it/s]
100%|██████████| 5/5 [00:00<00:00, 821.16it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8198.41it/s]
  0%|          | 0/5 [00:00<?, ?it/s][2025-06-21 04:54:34,951][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:34,951][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:34,952][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:34,954][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:34,961][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e0.pred.eval.mean.csv
[2025-06-21 04:54:34,962][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:34,965][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:34,965][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:34,967][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:34,968][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:34,976][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e1.pred.eval.mean.csv
[2025-06-21 04:54:34,976][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
100%|██████████| 5/5 [00:00<00:00, 789.14it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7730.01it/s]
100%|██████████| 5/5 [00:00<00:00, 777.85it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:34,982][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:34,982][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:34,983][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:34,984][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:34,992][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e2.pred.eval.mean.csv
[2025-06-21 04:54:34,993][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:34,998][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:34,998][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:34,999][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,000][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,008][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e3.pred.eval.mean.csv
[2025-06-21 04:54:35,008][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
100%|██████████| 5/5 [00:00<00:00, 8619.61it/s]
100%|██████████| 5/5 [00:00<00:00, 806.69it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7653.84it/s]
100%|██████████| 5/5 [00:00<00:00, 819.55it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7704.45it/s]
100%|██████████| 5/5 [00:00<00:00, 815.63it/s]
[2025-06-21 04:54:35,013][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,013][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,014][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,015][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,023][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e4.pred.eval.mean.csv
[2025-06-21 04:54:35,023][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,027][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,027][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,028][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,030][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,037][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e5.pred.eval.mean.csv
[2025-06-21 04:54:35,038][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,041][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,042][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,043][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,044][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8128.50it/s]
100%|██████████| 5/5 [00:00<00:00, 773.63it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7340.40it/s]
100%|██████████| 5/5 [00:00<00:00, 809.18it/s]
[2025-06-21 04:54:35,052][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e6.pred.eval.mean.csv
[2025-06-21 04:54:35,052][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,057][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,057][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,058][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,059][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,067][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e7.pred.eval.mean.csv
[2025-06-21 04:54:35,067][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,071][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,071][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,072][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,073][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,081][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e8.pred.eval.mean.csv
[2025-06-21 04:54:35,082][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8172.84it/s]
100%|██████████| 5/5 [00:00<00:00, 798.73it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8259.76it/s]
100%|██████████| 5/5 [00:00<00:00, 823.35it/s]
[2025-06-21 04:54:35,085][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,085][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,086][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,088][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,095][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.test.e9.pred.eval.mean.csv
[2025-06-21 04:54:35,096][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,101][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,101][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,103][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,104][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,112][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.pred.eval.mean.csv
[2025-06-21 04:54:35,112][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7541.00it/s]
100%|██████████| 5/5 [00:00<00:00, 795.28it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7922.75it/s]
100%|██████████| 5/5 [00:00<00:00, 763.24it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7590.13it/s]
  0%|          | 0/5 [00:00<?, ?it/s][2025-06-21 04:54:35,117][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,117][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,118][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,119][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,127][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e0.pred.eval.mean.csv
[2025-06-21 04:54:35,128][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,132][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,132][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,134][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,135][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,143][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e1.pred.eval.mean.csv
[2025-06-21 04:54:35,143][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,147][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,147][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,149][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,150][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 805.82it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7704.45it/s]
100%|██████████| 5/5 [00:00<00:00, 814.33it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:35,158][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e2.pred.eval.mean.csv
[2025-06-21 04:54:35,158][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,162][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,162][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,163][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,165][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,172][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e3.pred.eval.mean.csv
[2025-06-21 04:54:35,173][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,177][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,177][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,178][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,179][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,187][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e4.pred.eval.mean.csv
[2025-06-21 04:54:35,187][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
100%|██████████| 5/5 [00:00<00:00, 7439.35it/s]
100%|██████████| 5/5 [00:00<00:00, 822.77it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8035.07it/s]
100%|██████████| 5/5 [00:00<00:00, 794.80it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7612.17it/s]
100%|██████████| 5/5 [00:00<00:00, 772.20it/s]
[2025-06-21 04:54:35,191][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,191][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,192][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,194][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,202][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e5.pred.eval.mean.csv
[2025-06-21 04:54:35,202][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,206][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,206][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,207][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,209][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,217][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e6.pred.eval.mean.csv
[2025-06-21 04:54:35,217][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7121.06it/s]
100%|██████████| 5/5 [00:00<00:00, 765.19it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7337.83it/s]
100%|██████████| 5/5 [00:00<00:00, 794.80it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:35,221][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,221][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,222][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,224][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,231][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e7.pred.eval.mean.csv
[2025-06-21 04:54:35,232][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,235][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,235][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,237][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,238][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 8156.95it/s]
100%|██████████| 5/5 [00:00<00:00, 787.78it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8388.61it/s]
100%|██████████| 5/5 [00:00<00:00, 834.62it/s]
[2025-06-21 04:54:35,246][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e8.pred.eval.mean.csv
[2025-06-21 04:54:35,246][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,250][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,250][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,251][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,252][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,259][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.test.e9.pred.eval.mean.csv
[2025-06-21 04:54:35,260][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,264][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,264][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,265][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,266][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,273][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.pred.eval.mean.csv
[2025-06-21 04:54:35,274][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,277][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,277][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,278][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,279][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8292.42it/s]
100%|██████████| 5/5 [00:00<00:00, 853.68it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8388.61it/s]
100%|██████████| 5/5 [00:00<00:00, 855.04it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8318.73it/s]
100%|██████████| 5/5 [00:00<00:00, 841.62it/s]
[2025-06-21 04:54:35,286][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e0.pred.eval.mean.csv
[2025-06-21 04:54:35,287][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,291][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,291][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,293][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,294][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,301][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e1.pred.eval.mean.csv
[2025-06-21 04:54:35,301][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,306][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,306][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,307][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,308][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,315][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e2.pred.eval.mean.csv
[2025-06-21 04:54:35,316][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8388.61it/s]
100%|██████████| 5/5 [00:00<00:00, 838.49it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7623.24it/s]
100%|██████████| 5/5 [00:00<00:00, 808.52it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7471.15it/s]
  0%|          | 0/5 [00:00<?, ?it/s][2025-06-21 04:54:35,321][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,321][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,322][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,323][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,331][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e3.pred.eval.mean.csv
[2025-06-21 04:54:35,332][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,336][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,336][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,338][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,339][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,354][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e4.pred.eval.mean.csv
[2025-06-21 04:54:35,356][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
100%|██████████| 5/5 [00:00<00:00, 832.07it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 6605.20it/s]
[2025-06-21 04:54:35,363][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,363][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,365][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,389][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,401][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e5.pred.eval.mean.csv
[2025-06-21 04:54:35,401][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
100%|██████████| 5/5 [00:00<00:00, 736.18it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 6674.58it/s]
[2025-06-21 04:54:35,409][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,409][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,411][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,412][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 751.67it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 6730.27it/s]
100%|██████████| 5/5 [00:00<00:00, 759.89it/s]
[2025-06-21 04:54:35,421][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e6.pred.eval.mean.csv
[2025-06-21 04:54:35,422][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,425][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,425][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,427][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,428][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,436][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e7.pred.eval.mean.csv
[2025-06-21 04:54:35,437][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,440][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,440][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,442][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7612.17it/s]
100%|██████████| 5/5 [00:00<00:00, 758.13it/s]
[2025-06-21 04:54:35,443][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,451][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e8.pred.eval.mean.csv
[2025-06-21 04:54:35,451][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,455][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,455][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:35,456][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,457][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,465][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.test.e9.pred.eval.mean.csv
[2025-06-21 04:54:35,466][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/test.pred.eval.mean.csv
[2025-06-21 04:54:35,467][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8279.32it/s]
100%|██████████| 5/5 [00:00<00:00, 817.41it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9249.34it/s]
100%|██████████| 17/17 [00:00<00:00, 868.59it/s]
[2025-06-21 04:54:35,470][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,470][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,473][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,474][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,495][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.pred.eval.mean.csv
[2025-06-21 04:54:35,496][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,502][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,502][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,504][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,506][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9444.13it/s]
100%|██████████| 17/17 [00:00<00:00, 865.46it/s]
[2025-06-21 04:54:35,527][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e0.pred.eval.mean.csv
[2025-06-21 04:54:35,527][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,532][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,532][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,535][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,536][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9052.07it/s]
100%|██████████| 17/17 [00:00<00:00, 869.69it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9193.29it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:35,557][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e1.pred.eval.mean.csv
[2025-06-21 04:54:35,558][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,562][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,562][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,564][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,566][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,587][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e2.pred.eval.mean.csv
[2025-06-21 04:54:35,587][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,592][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,592][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,594][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,595][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 869.83it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9503.29it/s]
100%|██████████| 17/17 [00:00<00:00, 831.34it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8744.56it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:35,618][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e3.pred.eval.mean.csv
[2025-06-21 04:54:35,618][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,622][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,622][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,625][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,626][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 840.22it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8125.72it/s]
[2025-06-21 04:54:35,648][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e4.pred.eval.mean.csv
[2025-06-21 04:54:35,649][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,652][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,652][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,655][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,657][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 850.96it/s]
[2025-06-21 04:54:35,679][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e5.pred.eval.mean.csv
[2025-06-21 04:54:35,679][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,683][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,683][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,686][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,687][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9239.75it/s]
100%|██████████| 17/17 [00:00<00:00, 874.70it/s]
[2025-06-21 04:54:35,708][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e6.pred.eval.mean.csv
[2025-06-21 04:54:35,708][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,713][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,713][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,716][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,717][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9466.70it/s]
100%|██████████| 17/17 [00:00<00:00, 876.21it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8673.30it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:35,738][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e7.pred.eval.mean.csv
[2025-06-21 04:54:35,739][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,743][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,744][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,746][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,748][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,770][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e8.pred.eval.mean.csv
[2025-06-21 04:54:35,771][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,775][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,775][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,777][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,779][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 832.81it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9214.68it/s]
100%|██████████| 17/17 [00:00<00:00, 831.04it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9386.94it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:35,801][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.train.e9.pred.eval.mean.csv
[2025-06-21 04:54:35,802][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,806][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,806][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,809][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,810][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 845.09it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8533.17it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:35,832][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.pred.eval.mean.csv
[2025-06-21 04:54:35,833][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,837][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,837][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,840][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,841][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 836.40it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9293.95it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:35,863][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e0.pred.eval.mean.csv
[2025-06-21 04:54:35,864][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,867][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,867][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,870][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,871][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:35,892][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e1.pred.eval.mean.csv
[2025-06-21 04:54:35,893][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,897][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,897][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,900][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,901][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 873.44it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9491.90it/s]
100%|██████████| 17/17 [00:00<00:00, 875.79it/s]
[2025-06-21 04:54:35,922][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e2.pred.eval.mean.csv
[2025-06-21 04:54:35,922][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,929][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,929][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,931][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,932][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9614.77it/s]
100%|██████████| 17/17 [00:00<00:00, 844.88it/s]
[2025-06-21 04:54:35,955][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e3.pred.eval.mean.csv
[2025-06-21 04:54:35,955][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,960][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,960][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,963][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,964][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9203.97it/s]
100%|██████████| 17/17 [00:00<00:00, 809.75it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8705.06it/s]
[2025-06-21 04:54:35,988][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e4.pred.eval.mean.csv
[2025-06-21 04:54:35,988][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:35,993][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:35,993][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:35,997][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:35,998][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 839.11it/s]
[2025-06-21 04:54:36,020][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e5.pred.eval.mean.csv
[2025-06-21 04:54:36,021][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,026][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,026][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:36,029][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,030][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9022.29it/s]
100%|██████████| 17/17 [00:00<00:00, 838.56it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9174.37it/s]
[2025-06-21 04:54:36,052][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e6.pred.eval.mean.csv
[2025-06-21 04:54:36,053][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,057][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,057][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:36,060][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,062][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 817.51it/s]
[2025-06-21 04:54:36,085][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e7.pred.eval.mean.csv
[2025-06-21 04:54:36,086][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,087][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,088][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:36,090][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,091][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8901.77it/s]
100%|██████████| 17/17 [00:00<00:00, 844.84it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9518.51it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:36,113][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e8.pred.eval.mean.csv
[2025-06-21 04:54:36,114][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,115][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,115][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:36,118][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,119][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 890.05it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9298.86it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:36,140][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.train.e9.pred.eval.mean.csv
[2025-06-21 04:54:36,141][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,144][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,144][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,147][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,148][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 815.00it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 8501.97it/s]
[2025-06-21 04:54:36,172][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.pred.eval.mean.csv
[2025-06-21 04:54:36,173][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,180][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,180][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,183][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,185][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 827.09it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9113.65it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:36,209][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e0.pred.eval.mean.csv
[2025-06-21 04:54:36,209][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,213][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,214][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,216][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,218][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,241][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e1.pred.eval.mean.csv
[2025-06-21 04:54:36,242][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,245][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,245][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,249][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,250][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 838.37it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 8474.29it/s]
100%|██████████| 18/18 [00:00<00:00, 812.61it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 8925.11it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:36,274][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e2.pred.eval.mean.csv
[2025-06-21 04:54:36,275][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,277][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,277][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,280][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,281][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,304][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e3.pred.eval.mean.csv
[2025-06-21 04:54:36,305][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,307][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,307][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,310][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,311][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 831.21it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9199.16it/s]
100%|██████████| 18/18 [00:00<00:00, 849.30it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 8972.84it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:36,334][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e4.pred.eval.mean.csv
[2025-06-21 04:54:36,335][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,337][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,337][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,340][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,341][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 829.04it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 8738.13it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:36,365][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e5.pred.eval.mean.csv
[2025-06-21 04:54:36,365][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,367][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,367][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,370][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,371][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 819.37it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9091.70it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:36,395][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e6.pred.eval.mean.csv
[2025-06-21 04:54:36,396][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,398][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,398][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,401][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,406][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,432][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e7.pred.eval.mean.csv
[2025-06-21 04:54:36,432][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,445][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,445][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
100%|██████████| 18/18 [00:00<00:00, 764.66it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 8067.69it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:36,449][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,450][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 785.21it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 7709.33it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:36,475][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e8.pred.eval.mean.csv
[2025-06-21 04:54:36,476][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,478][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,478][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:36,481][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,483][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 831.32it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8411.04it/s]
100%|██████████| 9/9 [00:00<00:00, 861.23it/s]
[2025-06-21 04:54:36,507][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.train.e9.pred.eval.mean.csv
[2025-06-21 04:54:36,508][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/train.pred.eval.mean.csv
[2025-06-21 04:54:36,511][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,512][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,512][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,514][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,515][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,527][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.pred.eval.mean.csv
[2025-06-21 04:54:36,528][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,530][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,530][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,531][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,532][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,544][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e0.pred.eval.mean.csv
[2025-06-21 04:54:36,545][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,546][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,546][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9078.58it/s]
100%|██████████| 9/9 [00:00<00:00, 863.95it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9222.75it/s]
100%|██████████| 9/9 [00:00<00:00, 877.88it/s]
[2025-06-21 04:54:36,548][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,549][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,560][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e1.pred.eval.mean.csv
[2025-06-21 04:54:36,561][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,562][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,562][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,563][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,565][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,576][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e2.pred.eval.mean.csv
[2025-06-21 04:54:36,577][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,578][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,578][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9107.05it/s]
100%|██████████| 9/9 [00:00<00:00, 851.31it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 7371.36it/s]
100%|██████████| 9/9 [00:00<00:00, 828.11it/s]
[2025-06-21 04:54:36,581][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,582][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,594][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e3.pred.eval.mean.csv
[2025-06-21 04:54:36,595][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,596][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,596][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,598][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,599][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8709.91it/s]
100%|██████████| 9/9 [00:00<00:00, 841.05it/s]
[2025-06-21 04:54:36,611][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e4.pred.eval.mean.csv
[2025-06-21 04:54:36,612][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,614][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,614][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,616][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,617][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8243.88it/s]
100%|██████████| 9/9 [00:00<00:00, 842.23it/s]
[2025-06-21 04:54:36,629][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e5.pred.eval.mean.csv
[2025-06-21 04:54:36,629][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,631][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,631][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,633][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,634][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8671.89it/s]
100%|██████████| 9/9 [00:00<00:00, 816.65it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8498.14it/s]
100%|██████████| 9/9 [00:00<00:00, 837.35it/s]
[2025-06-21 04:54:36,647][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e6.pred.eval.mean.csv
[2025-06-21 04:54:36,647][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,649][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,649][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,651][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,652][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,664][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e7.pred.eval.mean.csv
[2025-06-21 04:54:36,665][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,666][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,666][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,668][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,669][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8911.41it/s]
100%|██████████| 9/9 [00:00<00:00, 827.81it/s]
[2025-06-21 04:54:36,682][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e8.pred.eval.mean.csv
[2025-06-21 04:54:36,682][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,686][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,686][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,687][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,689][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9120.26it/s]
100%|██████████| 9/9 [00:00<00:00, 807.98it/s]
[2025-06-21 04:54:36,702][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f0.valid.e9.pred.eval.mean.csv
[2025-06-21 04:54:36,702][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,706][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,706][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,708][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,709][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8505.80it/s]
100%|██████████| 9/9 [00:00<00:00, 854.30it/s]
[2025-06-21 04:54:36,721][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.pred.eval.mean.csv
[2025-06-21 04:54:36,721][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,725][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,725][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,727][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,728][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8964.32it/s]
100%|██████████| 9/9 [00:00<00:00, 873.95it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:36,740][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e0.pred.eval.mean.csv
[2025-06-21 04:54:36,740][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,744][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,744][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,746][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,747][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 9202.52it/s]
100%|██████████| 9/9 [00:00<00:00, 875.39it/s]
[2025-06-21 04:54:36,759][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e1.pred.eval.mean.csv
[2025-06-21 04:54:36,759][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,765][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,765][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,766][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,768][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9327.58it/s]
100%|██████████| 9/9 [00:00<00:00, 870.93it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8865.37it/s]
  0%|          | 0/9 [00:00<?, ?it/s][2025-06-21 04:54:36,779][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e2.pred.eval.mean.csv
[2025-06-21 04:54:36,780][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,785][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,785][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,787][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,788][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 820.25it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8458.15it/s]
  0%|          | 0/9 [00:00<?, ?it/s][2025-06-21 04:54:36,801][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e3.pred.eval.mean.csv
[2025-06-21 04:54:36,801][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,805][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,805][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,807][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,808][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,820][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e4.pred.eval.mean.csv
[2025-06-21 04:54:36,821][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,825][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,825][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,827][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,828][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 829.10it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8884.15it/s]
100%|██████████| 9/9 [00:00<00:00, 817.43it/s]
[2025-06-21 04:54:36,841][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e5.pred.eval.mean.csv
[2025-06-21 04:54:36,841][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,846][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,846][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,848][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,849][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8167.19it/s]
100%|██████████| 9/9 [00:00<00:00, 848.65it/s]
[2025-06-21 04:54:36,861][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e6.pred.eval.mean.csv
[2025-06-21 04:54:36,861][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,865][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,865][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,867][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,868][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8555.92it/s]
100%|██████████| 9/9 [00:00<00:00, 829.57it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8093.64it/s]
  0%|          | 0/9 [00:00<?, ?it/s][2025-06-21 04:54:36,881][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e7.pred.eval.mean.csv
[2025-06-21 04:54:36,882][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,887][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,887][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,889][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,890][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,903][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e8.pred.eval.mean.csv
[2025-06-21 04:54:36,903][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,907][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,908][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:36,909][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,911][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 796.74it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8325.70it/s]
100%|██████████| 9/9 [00:00<00:00, 801.22it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8411.74it/s]
100%|██████████| 8/8 [00:00<00:00, 814.67it/s]
[2025-06-21 04:54:36,923][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f1.valid.e9.pred.eval.mean.csv
[2025-06-21 04:54:36,925][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,928][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,928][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:36,930][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,931][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,942][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.pred.eval.mean.csv
[2025-06-21 04:54:36,943][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,945][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,945][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8575.12it/s]
100%|██████████| 8/8 [00:00<00:00, 826.02it/s]
[2025-06-21 04:54:36,947][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,948][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,959][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e0.pred.eval.mean.csv
[2025-06-21 04:54:36,959][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,962][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,962][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:36,963][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,964][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8881.53it/s]
100%|██████████| 8/8 [00:00<00:00, 831.07it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8928.80it/s]
100%|██████████| 8/8 [00:00<00:00, 835.60it/s]
[2025-06-21 04:54:36,975][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e1.pred.eval.mean.csv
[2025-06-21 04:54:36,976][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,978][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,978][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:36,980][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,981][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:36,992][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e2.pred.eval.mean.csv
[2025-06-21 04:54:36,992][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:36,995][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:36,995][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:36,996][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:36,998][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8401.21it/s]
100%|██████████| 8/8 [00:00<00:00, 823.56it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8081.51it/s]
100%|██████████| 8/8 [00:00<00:00, 790.43it/s]
[2025-06-21 04:54:37,009][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e3.pred.eval.mean.csv
[2025-06-21 04:54:37,010][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:37,013][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:37,013][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:37,015][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:37,016][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:37,027][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e4.pred.eval.mean.csv
[2025-06-21 04:54:37,028][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:37,031][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:37,031][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:37,033][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:37,035][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 6618.23it/s]
100%|██████████| 8/8 [00:00<00:00, 815.16it/s]
[2025-06-21 04:54:37,046][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e5.pred.eval.mean.csv
[2025-06-21 04:54:37,047][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:37,052][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:37,052][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:37,054][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:37,055][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8038.92it/s]
100%|██████████| 8/8 [00:00<00:00, 819.10it/s]
[2025-06-21 04:54:37,067][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e6.pred.eval.mean.csv
[2025-06-21 04:54:37,067][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:37,070][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:37,071][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:37,072][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:37,074][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8283.00it/s]
100%|██████████| 8/8 [00:00<00:00, 840.08it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:37,085][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e7.pred.eval.mean.csv
[2025-06-21 04:54:37,085][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:37,089][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:37,089][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:37,091][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:37,092][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 8/8 [00:00<00:00, 7034.47it/s]
100%|██████████| 8/8 [00:00<00:00, 803.37it/s]
[2025-06-21 04:54:37,104][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e8.pred.eval.mean.csv
[2025-06-21 04:54:37,105][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:37,108][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:37,109][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:37,110][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:37,112][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8254.47it/s]
100%|██████████| 8/8 [00:00<00:00, 778.65it/s]
[2025-06-21 04:54:37,124][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/f2.valid.e9.pred.eval.mean.csv
[2025-06-21 04:54:37,125][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/fnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b/valid.pred.eval.mean.csv
[2025-06-21 04:54:37,140][__main__][INFO] - Training team recommender instance mdl.bnn.Bnn ...
/Users/hfani/Github/fani-lab/OpeNTF/main/opentf_venv/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:60: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.
  warnings.warn(
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/fnn.py:76: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.unigram = Ntf.torch.tensor(y.sum(axis=0) / y.shape[0]).to(self.device)  # frequency of each expert in a batch
[2025-06-21 04:54:37,368][mdl.fnn][INFO] - Fold 0/2, Epoch 0, Train Loss: 1081.7032
[2025-06-21 04:54:37,369][mdl.fnn][INFO] - Fold 0/2, Epoch 0, Valid Loss: 566.1742
[2025-06-21 04:54:37,371][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e0.pt
[2025-06-21 04:54:37,371][mdl.fnn][INFO] - Validation loss decreased (inf --> 566.174194)
[2025-06-21 04:54:37,378][mdl.fnn][INFO] - Fold 0/2, Epoch 1, Train Loss: 1068.7405
[2025-06-21 04:54:37,378][mdl.fnn][INFO] - Fold 0/2, Epoch 1, Valid Loss: 567.5097
[2025-06-21 04:54:37,380][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e1.pt
[2025-06-21 04:54:37,380][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:37,386][mdl.fnn][INFO] - Fold 0/2, Epoch 2, Train Loss: 1056.8580
[2025-06-21 04:54:37,386][mdl.fnn][INFO] - Fold 0/2, Epoch 2, Valid Loss: 562.7072
[2025-06-21 04:54:37,388][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e2.pt
[2025-06-21 04:54:37,388][mdl.fnn][INFO] - Validation loss decreased (566.174194 --> 562.707153)
[2025-06-21 04:54:37,394][mdl.fnn][INFO] - Fold 0/2, Epoch 3, Train Loss: 1052.8320
[2025-06-21 04:54:37,395][mdl.fnn][INFO] - Fold 0/2, Epoch 3, Valid Loss: 552.0087
[2025-06-21 04:54:37,397][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e3.pt
[2025-06-21 04:54:37,397][mdl.fnn][INFO] - Validation loss decreased (562.707153 --> 552.008667)
[2025-06-21 04:54:37,403][mdl.fnn][INFO] - Fold 0/2, Epoch 4, Train Loss: 1060.8838
[2025-06-21 04:54:37,403][mdl.fnn][INFO] - Fold 0/2, Epoch 4, Valid Loss: 556.5289
[2025-06-21 04:54:37,405][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e4.pt
[2025-06-21 04:54:37,405][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:37,411][mdl.fnn][INFO] - Fold 0/2, Epoch 5, Train Loss: 1039.8787
[2025-06-21 04:54:37,412][mdl.fnn][INFO] - Fold 0/2, Epoch 5, Valid Loss: 558.7625
[2025-06-21 04:54:37,416][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e5.pt
[2025-06-21 04:54:37,416][mdl.fnn][INFO] - EarlyStopping counter: 2 out of 5
[2025-06-21 04:54:37,423][mdl.fnn][INFO] - Fold 0/2, Epoch 6, Train Loss: 1046.0693
[2025-06-21 04:54:37,424][mdl.fnn][INFO] - Fold 0/2, Epoch 6, Valid Loss: 558.9733
[2025-06-21 04:54:37,426][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e6.pt
[2025-06-21 04:54:37,426][mdl.fnn][INFO] - EarlyStopping counter: 3 out of 5
[2025-06-21 04:54:37,433][mdl.fnn][INFO] - Fold 0/2, Epoch 7, Train Loss: 1036.4906
[2025-06-21 04:54:37,433][mdl.fnn][INFO] - Fold 0/2, Epoch 7, Valid Loss: 556.7792
[2025-06-21 04:54:37,436][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e7.pt
[2025-06-21 04:54:37,436][mdl.fnn][INFO] - EarlyStopping counter: 4 out of 5
[2025-06-21 04:54:37,441][mdl.fnn][INFO] - Fold 0/2, Epoch 8, Train Loss: 1038.3335
[2025-06-21 04:54:37,442][mdl.fnn][INFO] - Fold 0/2, Epoch 8, Valid Loss: 552.7249
[2025-06-21 04:54:37,444][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.e8.pt
[2025-06-21 04:54:37,444][mdl.fnn][INFO] - EarlyStopping counter: 5 out of 5
[2025-06-21 04:54:37,444][mdl.fnn][INFO] - Early stopping triggered at epoch: 8
[2025-06-21 04:54:37,446][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.pt
[2025-06-21 04:54:37,453][mdl.fnn][INFO] - Fold 1/2, Epoch 0, Train Loss: 1053.7441
[2025-06-21 04:54:37,453][mdl.fnn][INFO] - Fold 1/2, Epoch 0, Valid Loss: 560.2506
[2025-06-21 04:54:37,455][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e0.pt
[2025-06-21 04:54:37,455][mdl.fnn][INFO] - Validation loss decreased (inf --> 560.250610)
[2025-06-21 04:54:37,460][mdl.fnn][INFO] - Fold 1/2, Epoch 1, Train Loss: 1069.1603
[2025-06-21 04:54:37,460][mdl.fnn][INFO] - Fold 1/2, Epoch 1, Valid Loss: 556.5714
[2025-06-21 04:54:37,463][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e1.pt
[2025-06-21 04:54:37,463][mdl.fnn][INFO] - Validation loss decreased (560.250610 --> 556.571350)
[2025-06-21 04:54:37,469][mdl.fnn][INFO] - Fold 1/2, Epoch 2, Train Loss: 1056.8754
[2025-06-21 04:54:37,469][mdl.fnn][INFO] - Fold 1/2, Epoch 2, Valid Loss: 550.2142
[2025-06-21 04:54:37,471][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e2.pt
[2025-06-21 04:54:37,471][mdl.fnn][INFO] - Validation loss decreased (556.571350 --> 550.214233)
[2025-06-21 04:54:37,476][mdl.fnn][INFO] - Fold 1/2, Epoch 3, Train Loss: 1046.5375
[2025-06-21 04:54:37,476][mdl.fnn][INFO] - Fold 1/2, Epoch 3, Valid Loss: 548.6076
[2025-06-21 04:54:37,478][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e3.pt
[2025-06-21 04:54:37,478][mdl.fnn][INFO] - Validation loss decreased (550.214233 --> 548.607605)
[2025-06-21 04:54:37,484][mdl.fnn][INFO] - Fold 1/2, Epoch 4, Train Loss: 1041.4457
[2025-06-21 04:54:37,484][mdl.fnn][INFO] - Fold 1/2, Epoch 4, Valid Loss: 552.2087
[2025-06-21 04:54:37,486][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e4.pt
[2025-06-21 04:54:37,486][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:37,491][mdl.fnn][INFO] - Fold 1/2, Epoch 5, Train Loss: 1042.4246
[2025-06-21 04:54:37,492][mdl.fnn][INFO] - Fold 1/2, Epoch 5, Valid Loss: 548.8552
[2025-06-21 04:54:37,494][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e5.pt
[2025-06-21 04:54:37,494][mdl.fnn][INFO] - EarlyStopping counter: 2 out of 5
[2025-06-21 04:54:37,499][mdl.fnn][INFO] - Fold 1/2, Epoch 6, Train Loss: 1041.9001
[2025-06-21 04:54:37,500][mdl.fnn][INFO] - Fold 1/2, Epoch 6, Valid Loss: 547.5934
[2025-06-21 04:54:37,502][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e6.pt
[2025-06-21 04:54:37,502][mdl.fnn][INFO] - Validation loss decreased (548.607605 --> 547.593445)
[2025-06-21 04:54:37,507][mdl.fnn][INFO] - Fold 1/2, Epoch 7, Train Loss: 1051.0593
[2025-06-21 04:54:37,507][mdl.fnn][INFO] - Fold 1/2, Epoch 7, Valid Loss: 544.7224
[2025-06-21 04:54:37,509][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e7.pt
[2025-06-21 04:54:37,509][mdl.fnn][INFO] - Validation loss decreased (547.593445 --> 544.722351)
[2025-06-21 04:54:37,517][mdl.fnn][INFO] - Fold 1/2, Epoch 8, Train Loss: 1036.6449
[2025-06-21 04:54:37,517][mdl.fnn][INFO] - Fold 1/2, Epoch 8, Valid Loss: 544.5208
[2025-06-21 04:54:37,520][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e8.pt
[2025-06-21 04:54:37,520][mdl.fnn][INFO] - Validation loss decreased (544.722351 --> 544.520752)
[2025-06-21 04:54:37,525][mdl.fnn][INFO] - Fold 1/2, Epoch 9, Train Loss: 1044.5267
[2025-06-21 04:54:37,526][mdl.fnn][INFO] - Fold 1/2, Epoch 9, Valid Loss: 544.2554
[2025-06-21 04:54:37,528][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.e9.pt
[2025-06-21 04:54:37,528][mdl.fnn][INFO] - Validation loss decreased (544.520752 --> 544.255371)
[2025-06-21 04:54:37,530][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.pt
[2025-06-21 04:54:37,537][mdl.fnn][INFO] - Fold 2/2, Epoch 0, Train Loss: 1101.3649
[2025-06-21 04:54:37,537][mdl.fnn][INFO] - Fold 2/2, Epoch 0, Valid Loss: 495.3194
[2025-06-21 04:54:37,540][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.e0.pt
[2025-06-21 04:54:37,540][mdl.fnn][INFO] - Validation loss decreased (inf --> 495.319397)
[2025-06-21 04:54:37,546][mdl.fnn][INFO] - Fold 2/2, Epoch 1, Train Loss: 1100.1370
[2025-06-21 04:54:37,546][mdl.fnn][INFO] - Fold 2/2, Epoch 1, Valid Loss: 493.0118
[2025-06-21 04:54:37,548][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.e1.pt
[2025-06-21 04:54:37,548][mdl.fnn][INFO] - Validation loss decreased (495.319397 --> 493.011810)
[2025-06-21 04:54:37,553][mdl.fnn][INFO] - Fold 2/2, Epoch 2, Train Loss: 1103.5767
[2025-06-21 04:54:37,553][mdl.fnn][INFO] - Fold 2/2, Epoch 2, Valid Loss: 495.6797
[2025-06-21 04:54:37,556][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.e2.pt
[2025-06-21 04:54:37,556][mdl.fnn][INFO] - EarlyStopping counter: 1 out of 5
[2025-06-21 04:54:37,562][mdl.fnn][INFO] - Fold 2/2, Epoch 3, Train Loss: 1103.2791
[2025-06-21 04:54:37,562][mdl.fnn][INFO] - Fold 2/2, Epoch 3, Valid Loss: 494.5939
[2025-06-21 04:54:37,565][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.e3.pt
[2025-06-21 04:54:37,565][mdl.fnn][INFO] - EarlyStopping counter: 2 out of 5
[2025-06-21 04:54:37,572][mdl.fnn][INFO] - Fold 2/2, Epoch 4, Train Loss: 1098.5352
[2025-06-21 04:54:37,572][mdl.fnn][INFO] - Fold 2/2, Epoch 4, Valid Loss: 497.0495
[2025-06-21 04:54:37,574][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.e4.pt
[2025-06-21 04:54:37,574][mdl.fnn][INFO] - EarlyStopping counter: 3 out of 5
[2025-06-21 04:54:37,583][mdl.fnn][INFO] - Fold 2/2, Epoch 5, Train Loss: 1097.0167
[2025-06-21 04:54:37,583][mdl.fnn][INFO] - Fold 2/2, Epoch 5, Valid Loss: 494.2368
[2025-06-21 04:54:37,594][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.e5.pt
[2025-06-21 04:54:37,596][mdl.fnn][INFO] - EarlyStopping counter: 4 out of 5
[2025-06-21 04:54:37,603][mdl.fnn][INFO] - Fold 2/2, Epoch 6, Train Loss: 1096.9299
[2025-06-21 04:54:37,604][mdl.fnn][INFO] - Fold 2/2, Epoch 6, Valid Loss: 494.6551
[2025-06-21 04:54:37,611][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.e6.pt
[2025-06-21 04:54:37,611][mdl.fnn][INFO] - EarlyStopping counter: 5 out of 5
[2025-06-21 04:54:37,611][mdl.fnn][INFO] - Early stopping triggered at epoch: 6
[2025-06-21 04:54:37,613][mdl.fnn][INFO] - bnn model with b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10 saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.pt
[2025-06-21 04:54:37,613][__main__][INFO] - Testing team recommender instance mdl.bnn.Bnn ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/fnn.py:185: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.model.load_state_dict(Ntf.torch.load(modelfile)['model_state_dict'])
[2025-06-21 04:54:37,631][mdl.fnn][INFO] - bnn model predictions for fold0.test. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.pred
[2025-06-21 04:54:37,639][mdl.fnn][INFO] - bnn model predictions for fold0.train. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.pred
[2025-06-21 04:54:37,653][mdl.fnn][INFO] - bnn model predictions for fold0.valid. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.pred
[2025-06-21 04:54:37,668][mdl.fnn][INFO] - bnn model predictions for fold0.test.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e5.pred
[2025-06-21 04:54:37,677][mdl.fnn][INFO] - bnn model predictions for fold0.train.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e5.pred
[2025-06-21 04:54:37,684][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e5.pred
[2025-06-21 04:54:37,699][mdl.fnn][INFO] - bnn model predictions for fold0.test.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e1.pred
[2025-06-21 04:54:37,707][mdl.fnn][INFO] - bnn model predictions for fold0.train.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e1.pred
[2025-06-21 04:54:37,715][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e1.pred
[2025-06-21 04:54:37,729][mdl.fnn][INFO] - bnn model predictions for fold0.test.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e0.pred
[2025-06-21 04:54:37,736][mdl.fnn][INFO] - bnn model predictions for fold0.train.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e0.pred
[2025-06-21 04:54:37,743][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e0.pred
[2025-06-21 04:54:37,756][mdl.fnn][INFO] - bnn model predictions for fold0.test.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e4.pred
[2025-06-21 04:54:37,763][mdl.fnn][INFO] - bnn model predictions for fold0.train.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e4.pred
[2025-06-21 04:54:37,773][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e4.pred
[2025-06-21 04:54:37,787][mdl.fnn][INFO] - bnn model predictions for fold0.test.e8. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e8.pred
[2025-06-21 04:54:37,793][mdl.fnn][INFO] - bnn model predictions for fold0.train.e8. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e8.pred
[2025-06-21 04:54:37,803][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e8. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e8.pred
[2025-06-21 04:54:37,818][mdl.fnn][INFO] - bnn model predictions for fold0.test.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e3.pred
[2025-06-21 04:54:37,826][mdl.fnn][INFO] - bnn model predictions for fold0.train.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e3.pred
[2025-06-21 04:54:37,833][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e3.pred
[2025-06-21 04:54:37,848][mdl.fnn][INFO] - bnn model predictions for fold0.test.e7. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e7.pred
[2025-06-21 04:54:37,856][mdl.fnn][INFO] - bnn model predictions for fold0.train.e7. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e7.pred
[2025-06-21 04:54:37,864][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e7. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e7.pred
[2025-06-21 04:54:37,879][mdl.fnn][INFO] - bnn model predictions for fold0.test.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e6.pred
[2025-06-21 04:54:37,894][mdl.fnn][INFO] - bnn model predictions for fold0.train.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e6.pred
[2025-06-21 04:54:37,901][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e6.pred
[2025-06-21 04:54:37,915][mdl.fnn][INFO] - bnn model predictions for fold0.test.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e2.pred
[2025-06-21 04:54:37,921][mdl.fnn][INFO] - bnn model predictions for fold0.train.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e2.pred
[2025-06-21 04:54:38,045][mdl.fnn][INFO] - bnn model predictions for fold0.valid.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e2.pred
[2025-06-21 04:54:38,063][mdl.fnn][INFO] - bnn model predictions for fold1.test. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.pred
[2025-06-21 04:54:38,071][mdl.fnn][INFO] - bnn model predictions for fold1.train. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.pred
[2025-06-21 04:54:38,080][mdl.fnn][INFO] - bnn model predictions for fold1.valid. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.pred
[2025-06-21 04:54:38,095][mdl.fnn][INFO] - bnn model predictions for fold1.test.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e1.pred
[2025-06-21 04:54:38,103][mdl.fnn][INFO] - bnn model predictions for fold1.train.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e1.pred
[2025-06-21 04:54:38,111][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e1.pred
[2025-06-21 04:54:38,127][mdl.fnn][INFO] - bnn model predictions for fold1.test.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e5.pred
[2025-06-21 04:54:38,137][mdl.fnn][INFO] - bnn model predictions for fold1.train.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e5.pred
[2025-06-21 04:54:38,145][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e5.pred
[2025-06-21 04:54:38,159][mdl.fnn][INFO] - bnn model predictions for fold1.test.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e4.pred
[2025-06-21 04:54:38,167][mdl.fnn][INFO] - bnn model predictions for fold1.train.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e4.pred
[2025-06-21 04:54:38,175][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e4.pred
[2025-06-21 04:54:38,189][mdl.fnn][INFO] - bnn model predictions for fold1.test.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e0.pred
[2025-06-21 04:54:38,195][mdl.fnn][INFO] - bnn model predictions for fold1.train.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e0.pred
[2025-06-21 04:54:38,202][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e0.pred
[2025-06-21 04:54:38,214][mdl.fnn][INFO] - bnn model predictions for fold1.test.e7. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e7.pred
[2025-06-21 04:54:38,221][mdl.fnn][INFO] - bnn model predictions for fold1.train.e7. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e7.pred
[2025-06-21 04:54:38,227][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e7. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e7.pred
[2025-06-21 04:54:38,239][mdl.fnn][INFO] - bnn model predictions for fold1.test.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e3.pred
[2025-06-21 04:54:38,247][mdl.fnn][INFO] - bnn model predictions for fold1.train.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e3.pred
[2025-06-21 04:54:38,255][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e3.pred
[2025-06-21 04:54:38,273][mdl.fnn][INFO] - bnn model predictions for fold1.test.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e2.pred
[2025-06-21 04:54:38,298][mdl.fnn][INFO] - bnn model predictions for fold1.train.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e2.pred
[2025-06-21 04:54:38,305][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e2.pred
[2025-06-21 04:54:38,320][mdl.fnn][INFO] - bnn model predictions for fold1.test.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e6.pred
[2025-06-21 04:54:38,328][mdl.fnn][INFO] - bnn model predictions for fold1.train.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e6.pred
[2025-06-21 04:54:38,335][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e6.pred
[2025-06-21 04:54:38,350][mdl.fnn][INFO] - bnn model predictions for fold1.test.e9. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e9.pred
[2025-06-21 04:54:38,358][mdl.fnn][INFO] - bnn model predictions for fold1.train.e9. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e9.pred
[2025-06-21 04:54:38,367][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e9. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e9.pred
[2025-06-21 04:54:38,381][mdl.fnn][INFO] - bnn model predictions for fold1.test.e8. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e8.pred
[2025-06-21 04:54:38,390][mdl.fnn][INFO] - bnn model predictions for fold1.train.e8. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e8.pred
[2025-06-21 04:54:38,397][mdl.fnn][INFO] - bnn model predictions for fold1.valid.e8. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e8.pred
[2025-06-21 04:54:38,411][mdl.fnn][INFO] - bnn model predictions for fold2.test. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.pred
[2025-06-21 04:54:38,418][mdl.fnn][INFO] - bnn model predictions for fold2.train. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.pred
[2025-06-21 04:54:38,426][mdl.fnn][INFO] - bnn model predictions for fold2.valid. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.pred
[2025-06-21 04:54:38,439][mdl.fnn][INFO] - bnn model predictions for fold2.test.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e1.pred
[2025-06-21 04:54:38,446][mdl.fnn][INFO] - bnn model predictions for fold2.train.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e1.pred
[2025-06-21 04:54:38,453][mdl.fnn][INFO] - bnn model predictions for fold2.valid.e1. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e1.pred
[2025-06-21 04:54:38,465][mdl.fnn][INFO] - bnn model predictions for fold2.test.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e5.pred
[2025-06-21 04:54:38,472][mdl.fnn][INFO] - bnn model predictions for fold2.train.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e5.pred
[2025-06-21 04:54:38,480][mdl.fnn][INFO] - bnn model predictions for fold2.valid.e5. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e5.pred
[2025-06-21 04:54:38,501][mdl.fnn][INFO] - bnn model predictions for fold2.test.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e4.pred
[2025-06-21 04:54:38,509][mdl.fnn][INFO] - bnn model predictions for fold2.train.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e4.pred
[2025-06-21 04:54:38,519][mdl.fnn][INFO] - bnn model predictions for fold2.valid.e4. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e4.pred
[2025-06-21 04:54:38,535][mdl.fnn][INFO] - bnn model predictions for fold2.test.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e0.pred
[2025-06-21 04:54:38,542][mdl.fnn][INFO] - bnn model predictions for fold2.train.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e0.pred
[2025-06-21 04:54:38,553][mdl.fnn][INFO] - bnn model predictions for fold2.valid.e0. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e0.pred
[2025-06-21 04:54:38,569][mdl.fnn][INFO] - bnn model predictions for fold2.test.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e3.pred
[2025-06-21 04:54:38,578][mdl.fnn][INFO] - bnn model predictions for fold2.train.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e3.pred
[2025-06-21 04:54:38,588][mdl.fnn][INFO] - bnn model predictions for fold2.valid.e3. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e3.pred
[2025-06-21 04:54:38,603][mdl.fnn][INFO] - bnn model predictions for fold2.test.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e2.pred
[2025-06-21 04:54:38,609][mdl.fnn][INFO] - bnn model predictions for fold2.train.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e2.pred
[2025-06-21 04:54:38,617][mdl.fnn][INFO] - bnn model predictions for fold2.valid.e2. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e2.pred
[2025-06-21 04:54:38,634][mdl.fnn][INFO] - bnn model predictions for fold2.test.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e6.pred
[2025-06-21 04:54:38,641][mdl.fnn][INFO] - bnn model predictions for fold2.train.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e6.pred
[2025-06-21 04:54:38,647][mdl.fnn][INFO] - bnn model predictions for fold2.valid.e6. has saved at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e6.pred
[2025-06-21 04:54:38,647][__main__][INFO] - Evaluating team recommender instance mdl.bnn.Bnn ...
[2025-06-21 04:54:38,650][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,652][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,652][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,654][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,655][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 6914.45it/s]
100%|██████████| 5/5 [00:00<00:00, 773.31it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7598.38it/s]
100%|██████████| 5/5 [00:00<00:00, 766.76it/s]
[2025-06-21 04:54:38,663][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.pred.eval.mean.csv
[2025-06-21 04:54:38,664][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,667][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,667][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,669][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,670][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,678][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e0.pred.eval.mean.csv
[2025-06-21 04:54:38,679][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,682][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,682][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,683][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,685][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7463.17it/s]
100%|██████████| 5/5 [00:00<00:00, 808.90it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7541.00it/s]
  0%|          | 0/5 [00:00<?, ?it/s][2025-06-21 04:54:38,692][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e1.pred.eval.mean.csv
[2025-06-21 04:54:38,693][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,696][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,696][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,698][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,699][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,707][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e2.pred.eval.mean.csv
[2025-06-21 04:54:38,707][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,711][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,711][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,712][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,714][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 787.25it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 6784.70it/s]
100%|██████████| 5/5 [00:00<00:00, 815.12it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7730.01it/s]
100%|██████████| 5/5 [00:00<00:00, 852.05it/s]
[2025-06-21 04:54:38,721][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e3.pred.eval.mean.csv
[2025-06-21 04:54:38,722][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,726][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,726][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,727][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,729][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,736][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e4.pred.eval.mean.csv
[2025-06-21 04:54:38,736][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,740][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,740][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,742][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,743][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,751][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e5.pred.eval.mean.csv
[2025-06-21 04:54:38,751][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 6907.62it/s]
100%|██████████| 5/5 [00:00<00:00, 777.50it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7606.64it/s]
100%|██████████| 5/5 [00:00<00:00, 781.85it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7441.99it/s]
  0%|          | 0/5 [00:00<?, ?it/s][2025-06-21 04:54:38,755][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,755][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,756][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,758][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,766][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e6.pred.eval.mean.csv
[2025-06-21 04:54:38,766][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,769][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,769][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,771][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,772][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,780][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e7.pred.eval.mean.csv
[2025-06-21 04:54:38,781][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,784][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,784][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,786][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,787][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 782.49it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7667.83it/s]
100%|██████████| 5/5 [00:00<00:00, 770.45it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:38,795][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.test.e8.pred.eval.mean.csv
[2025-06-21 04:54:38,796][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,799][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,799][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,801][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,802][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,809][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.pred.eval.mean.csv
[2025-06-21 04:54:38,810][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,813][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,813][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,814][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
100%|██████████| 5/5 [00:00<00:00, 7825.19it/s]
100%|██████████| 5/5 [00:00<00:00, 795.40it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8476.77it/s]
100%|██████████| 5/5 [00:00<00:00, 807.65it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7998.29it/s]
  0%|          | 0/5 [00:00<?, ?it/s][2025-06-21 04:54:38,817][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,825][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e0.pred.eval.mean.csv
[2025-06-21 04:54:38,825][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,828][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,828][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,830][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,831][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,838][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e1.pred.eval.mean.csv
[2025-06-21 04:54:38,839][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,841][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,841][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,843][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,844][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 796.19it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7895.90it/s]
100%|██████████| 5/5 [00:00<00:00, 823.45it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8882.47it/s]
100%|██████████| 5/5 [00:00<00:00, 846.72it/s]
[2025-06-21 04:54:38,851][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e2.pred.eval.mean.csv
[2025-06-21 04:54:38,851][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,854][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,854][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,855][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,856][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,863][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e3.pred.eval.mean.csv
[2025-06-21 04:54:38,864][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,866][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,866][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,867][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,868][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,876][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e4.pred.eval.mean.csv
[2025-06-21 04:54:38,876][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,879][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,879][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,880][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,881][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8992.93it/s]
100%|██████████| 5/5 [00:00<00:00, 835.99it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8338.58it/s]
100%|██████████| 5/5 [00:00<00:00, 795.19it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:38,891][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e5.pred.eval.mean.csv
[2025-06-21 04:54:38,894][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,900][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,901][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,902][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,904][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 6765.01it/s]
100%|██████████| 5/5 [00:00<00:00, 809.99it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8388.61it/s]
100%|██████████| 5/5 [00:00<00:00, 821.67it/s]
[2025-06-21 04:54:38,912][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e6.pred.eval.mean.csv
[2025-06-21 04:54:38,912][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,916][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,916][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,917][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,919][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,926][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e7.pred.eval.mean.csv
[2025-06-21 04:54:38,927][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,930][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,931][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,932][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,933][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8694.66it/s]
100%|██████████| 5/5 [00:00<00:00, 799.25it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7973.96it/s]
  0%|          | 0/5 [00:00<?, ?it/s][2025-06-21 04:54:38,941][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e8.pred.eval.mean.csv
[2025-06-21 04:54:38,941][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,945][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,945][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,946][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,948][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,955][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.test.e9.pred.eval.mean.csv
[2025-06-21 04:54:38,956][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,960][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,960][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,961][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,963][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 5/5 [00:00<00:00, 823.87it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8001.34it/s]
100%|██████████| 5/5 [00:00<00:00, 808.28it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8001.34it/s]
  0%|          | 0/5 [00:00<?, ?it/s][2025-06-21 04:54:38,970][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.pred.eval.mean.csv
[2025-06-21 04:54:38,971][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,975][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,975][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,976][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,978][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:38,985][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e0.pred.eval.mean.csv
[2025-06-21 04:54:38,986][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:38,989][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:38,990][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:38,991][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:38,992][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,000][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e1.pred.eval.mean.csv
[2025-06-21 04:54:39,000][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
100%|██████████| 5/5 [00:00<00:00, 822.86it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7397.36it/s]
100%|██████████| 5/5 [00:00<00:00, 807.34it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 7741.42it/s]
100%|██████████| 5/5 [00:00<00:00, 812.35it/s]
[2025-06-21 04:54:39,004][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,004][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:39,005][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,007][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,014][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e2.pred.eval.mean.csv
[2025-06-21 04:54:39,015][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,019][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,019][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:39,020][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,021][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,028][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e3.pred.eval.mean.csv
[2025-06-21 04:54:39,028][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,032][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,032][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:39,033][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,034][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8075.29it/s]
100%|██████████| 5/5 [00:00<00:00, 857.31it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8594.89it/s]
100%|██████████| 5/5 [00:00<00:00, 865.48it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8456.26it/s]
100%|██████████| 5/5 [00:00<00:00, 859.56it/s]
[2025-06-21 04:54:39,041][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e4.pred.eval.mean.csv
[2025-06-21 04:54:39,042][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,047][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,047][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:39,049][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,050][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,057][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e5.pred.eval.mean.csv
[2025-06-21 04:54:39,057][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,062][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,062][evl.metric][INFO] - Building pytrec_eval input for 5 instances ...
[2025-06-21 04:54:39,064][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,065][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,072][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.test.e6.pred.eval.mean.csv
[2025-06-21 04:54:39,073][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/test.pred.eval.mean.csv
[2025-06-21 04:54:39,075][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 5/5 [00:00<00:00, 8518.08it/s]
100%|██████████| 5/5 [00:00<00:00, 841.35it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9129.73it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,080][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,080][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,083][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,084][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 832.26it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9023.43it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,106][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.pred.eval.mean.csv
[2025-06-21 04:54:39,107][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,112][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,112][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,115][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,116][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 852.35it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9008.61it/s]
[2025-06-21 04:54:39,137][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e0.pred.eval.mean.csv
[2025-06-21 04:54:39,138][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,143][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,143][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,146][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,148][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 848.89it/s]
[2025-06-21 04:54:39,169][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e1.pred.eval.mean.csv
[2025-06-21 04:54:39,170][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,174][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,174][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,177][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,178][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8723.17it/s]
100%|██████████| 17/17 [00:00<00:00, 811.84it/s]
[2025-06-21 04:54:39,201][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e2.pred.eval.mean.csv
[2025-06-21 04:54:39,201][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,207][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,207][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,210][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9182.64it/s]
100%|██████████| 17/17 [00:00<00:00, 836.81it/s]
[2025-06-21 04:54:39,211][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9300.01it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,233][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e3.pred.eval.mean.csv
[2025-06-21 04:54:39,233][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,238][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,238][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,240][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,241][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 876.01it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9455.40it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,262][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e4.pred.eval.mean.csv
[2025-06-21 04:54:39,263][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,268][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,268][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,271][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,272][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 853.67it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8682.80it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,294][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e5.pred.eval.mean.csv
[2025-06-21 04:54:39,294][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,298][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,298][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,301][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,302][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,323][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e6.pred.eval.mean.csv
[2025-06-21 04:54:39,324][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,328][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,328][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,331][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,332][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 860.49it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9085.52it/s]
100%|██████████| 17/17 [00:00<00:00, 824.32it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8947.57it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,355][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e7.pred.eval.mean.csv
[2025-06-21 04:54:39,355][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,360][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,360][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,363][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,364][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 832.18it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8491.51it/s]
[2025-06-21 04:54:39,386][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.train.e8.pred.eval.mean.csv
[2025-06-21 04:54:39,387][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,391][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,392][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,394][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,396][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 847.20it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8682.80it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,418][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.pred.eval.mean.csv
[2025-06-21 04:54:39,419][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,423][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,423][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,425][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,427][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 859.32it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9162.58it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,448][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e0.pred.eval.mean.csv
[2025-06-21 04:54:39,449][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,453][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,453][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,456][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,457][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 869.20it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9460.42it/s]
[2025-06-21 04:54:39,478][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e1.pred.eval.mean.csv
[2025-06-21 04:54:39,479][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,485][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,485][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,487][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,488][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 850.34it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8864.14it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,511][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e2.pred.eval.mean.csv
[2025-06-21 04:54:39,511][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,516][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,516][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,519][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,520][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 830.93it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9310.94it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,542][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e3.pred.eval.mean.csv
[2025-06-21 04:54:39,543][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,547][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,547][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,550][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,551][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,574][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e4.pred.eval.mean.csv
[2025-06-21 04:54:39,574][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,578][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,578][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,581][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,582][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 832.56it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8569.06it/s]
100%|██████████| 17/17 [00:00<00:00, 829.11it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9009.75it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,605][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e5.pred.eval.mean.csv
[2025-06-21 04:54:39,605][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,609][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,609][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,612][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,613][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,635][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e6.pred.eval.mean.csv
[2025-06-21 04:54:39,636][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,640][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,640][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,642][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,643][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 835.59it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 8910.67it/s]
100%|██████████| 17/17 [00:00<00:00, 854.84it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9139.09it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,665][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e7.pred.eval.mean.csv
[2025-06-21 04:54:39,666][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,670][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,670][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,673][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,674][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 852.43it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 17/17 [00:00<00:00, 9149.64it/s]
  0%|          | 0/17 [00:00<?, ?it/s][2025-06-21 04:54:39,696][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e8.pred.eval.mean.csv
[2025-06-21 04:54:39,696][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,700][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,700][evl.metric][INFO] - Building pytrec_eval input for 17 instances ...
[2025-06-21 04:54:39,703][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,704][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,726][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.train.e9.pred.eval.mean.csv
[2025-06-21 04:54:39,727][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,731][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,731][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:39,734][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,735][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 17/17 [00:00<00:00, 835.51it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9146.77it/s]
100%|██████████| 18/18 [00:00<00:00, 828.27it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9136.81it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:39,759][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.pred.eval.mean.csv
[2025-06-21 04:54:39,760][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,764][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,764][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:39,767][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,768][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,791][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e0.pred.eval.mean.csv
[2025-06-21 04:54:39,792][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,796][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,796][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:39,799][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,800][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 841.43it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 8888.33it/s]
100%|██████████| 18/18 [00:00<00:00, 832.26it/s]
[2025-06-21 04:54:39,823][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e1.pred.eval.mean.csv
[2025-06-21 04:54:39,824][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,828][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,828][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:39,831][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,832][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9569.97it/s]
100%|██████████| 18/18 [00:00<00:00, 857.47it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9584.55it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:39,855][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e2.pred.eval.mean.csv
[2025-06-21 04:54:39,855][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,859][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,859][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:39,862][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,863][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:39,885][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e3.pred.eval.mean.csv
[2025-06-21 04:54:39,885][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,891][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,891][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:39,894][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,895][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 875.78it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9351.85it/s]
100%|██████████| 18/18 [00:00<00:00, 848.27it/s]
[2025-06-21 04:54:39,918][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e4.pred.eval.mean.csv
[2025-06-21 04:54:39,919][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,923][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,923][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:39,926][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,927][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9600.39it/s]
100%|██████████| 18/18 [00:00<00:00, 858.26it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 18/18 [00:00<00:00, 9438.36it/s]
  0%|          | 0/18 [00:00<?, ?it/s][2025-06-21 04:54:39,950][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e5.pred.eval.mean.csv
[2025-06-21 04:54:39,950][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,955][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,955][evl.metric][INFO] - Building pytrec_eval input for 18 instances ...
[2025-06-21 04:54:39,957][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,959][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 18/18 [00:00<00:00, 839.66it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:39,982][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.train.e6.pred.eval.mean.csv
[2025-06-21 04:54:39,983][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/train.pred.eval.mean.csv
[2025-06-21 04:54:39,985][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:39,990][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:39,990][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:39,992][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:39,993][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 8546.24it/s]
100%|██████████| 9/9 [00:00<00:00, 798.73it/s]
[2025-06-21 04:54:40,006][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.pred.eval.mean.csv
[2025-06-21 04:54:40,007][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,010][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,010][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,012][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,014][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 7724.32it/s]
100%|██████████| 9/9 [00:00<00:00, 824.48it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8728.03it/s]
100%|██████████| 9/9 [00:00<00:00, 840.82it/s]
[2025-06-21 04:54:40,026][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e0.pred.eval.mean.csv
[2025-06-21 04:54:40,027][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,030][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,030][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,032][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,033][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8998.51it/s]
100%|██████████| 9/9 [00:00<00:00, 866.05it/s]
[2025-06-21 04:54:40,046][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e1.pred.eval.mean.csv
[2025-06-21 04:54:40,046][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,050][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,050][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,052][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,053][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,065][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e2.pred.eval.mean.csv
[2025-06-21 04:54:40,065][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,070][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,070][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,071][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,073][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8964.32it/s]
100%|██████████| 9/9 [00:00<00:00, 860.68it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8644.09it/s]
100%|██████████| 9/9 [00:00<00:00, 860.64it/s]
[2025-06-21 04:54:40,084][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e3.pred.eval.mean.csv
[2025-06-21 04:54:40,085][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,091][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,091][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,092][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,094][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9072.03it/s]
100%|██████████| 9/9 [00:00<00:00, 858.92it/s]
[2025-06-21 04:54:40,105][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e4.pred.eval.mean.csv
[2025-06-21 04:54:40,106][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,111][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,111][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,113][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,114][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,126][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e5.pred.eval.mean.csv
[2025-06-21 04:54:40,127][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,132][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,132][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,134][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,136][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 7677.19it/s]
100%|██████████| 9/9 [00:00<00:00, 809.36it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8496.23it/s]
  0%|          | 0/9 [00:00<?, ?it/s][2025-06-21 04:54:40,149][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e6.pred.eval.mean.csv
[2025-06-21 04:54:40,149][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,154][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,154][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,155][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,157][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,169][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e7.pred.eval.mean.csv
[2025-06-21 04:54:40,169][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,173][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,173][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,175][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,176][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 828.80it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9082.95it/s]
100%|██████████| 9/9 [00:00<00:00, 835.50it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8842.52it/s]
100%|██████████| 9/9 [00:00<00:00, 854.22it/s]
[2025-06-21 04:54:40,188][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f0.valid.e8.pred.eval.mean.csv
[2025-06-21 04:54:40,189][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,193][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,193][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,195][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,196][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,208][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.pred.eval.mean.csv
[2025-06-21 04:54:40,209][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,213][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,213][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,215][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,216][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8561.75it/s]
100%|██████████| 9/9 [00:00<00:00, 822.74it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9231.78it/s]
100%|██████████| 9/9 [00:00<00:00, 804.93it/s]
[2025-06-21 04:54:40,229][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e0.pred.eval.mean.csv
[2025-06-21 04:54:40,229][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,233][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,234][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,235][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,236][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,249][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e1.pred.eval.mean.csv
[2025-06-21 04:54:40,250][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8249.29it/s]
100%|██████████| 9/9 [00:00<00:00, 858.12it/s]
[2025-06-21 04:54:40,253][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,253][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,255][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,256][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,268][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e2.pred.eval.mean.csv
[2025-06-21 04:54:40,269][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,272][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,272][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,274][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,275][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9506.10it/s]
100%|██████████| 9/9 [00:00<00:00, 834.04it/s]
[2025-06-21 04:54:40,287][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e3.pred.eval.mean.csv
[2025-06-21 04:54:40,288][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,292][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,292][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,294][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,295][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9164.54it/s]
100%|██████████| 9/9 [00:00<00:00, 874.70it/s]
[2025-06-21 04:54:40,307][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e4.pred.eval.mean.csv
[2025-06-21 04:54:40,307][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,313][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,313][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,314][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,315][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 9209.25it/s]
100%|██████████| 9/9 [00:00<00:00, 870.43it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8475.24it/s]
[2025-06-21 04:54:40,327][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e5.pred.eval.mean.csv
[2025-06-21 04:54:40,327][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,332][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,332][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,334][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,335][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 801.36it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
[2025-06-21 04:54:40,348][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e6.pred.eval.mean.csv
[2025-06-21 04:54:40,349][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e7.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,353][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,353][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,355][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,357][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,369][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e7.pred.eval.mean.csv
[2025-06-21 04:54:40,369][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e8.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,373][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,373][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,375][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,376][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
100%|██████████| 9/9 [00:00<00:00, 7950.45it/s]
100%|██████████| 9/9 [00:00<00:00, 831.12it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8563.69it/s]
100%|██████████| 9/9 [00:00<00:00, 817.64it/s]
[2025-06-21 04:54:40,389][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e8.pred.eval.mean.csv
[2025-06-21 04:54:40,390][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e9.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,395][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,395][evl.metric][INFO] - Building pytrec_eval input for 9 instances ...
[2025-06-21 04:54:40,397][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,398][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 9/9 [00:00<00:00, 8344.11it/s]
100%|██████████| 9/9 [00:00<00:00, 850.10it/s]
[2025-06-21 04:54:40,410][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f1.valid.e9.pred.eval.mean.csv
[2025-06-21 04:54:40,411][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,415][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,415][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:40,417][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,418][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8621.39it/s]
100%|██████████| 8/8 [00:00<00:00, 825.91it/s]
[2025-06-21 04:54:40,429][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.pred.eval.mean.csv
[2025-06-21 04:54:40,430][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e0.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,435][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,435][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:40,436][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,437][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8575.12it/s]
100%|██████████| 8/8 [00:00<00:00, 822.53it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 7588.07it/s]
100%|██████████| 8/8 [00:00<00:00, 829.69it/s]
[2025-06-21 04:54:40,449][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e0.pred.eval.mean.csv
[2025-06-21 04:54:40,449][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e1.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,453][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,453][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:40,455][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,457][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,468][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e1.pred.eval.mean.csv
[2025-06-21 04:54:40,468][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e2.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,472][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,472][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:40,474][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,475][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8754.09it/s]
100%|██████████| 8/8 [00:00<00:00, 836.58it/s]
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 9029.72it/s]
100%|██████████| 8/8 [00:00<00:00, 863.83it/s]
[2025-06-21 04:54:40,486][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e2.pred.eval.mean.csv
[2025-06-21 04:54:40,487][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e3.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,490][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,490][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:40,492][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,493][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,504][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e3.pred.eval.mean.csv
[2025-06-21 04:54:40,505][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e4.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,508][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 9269.18it/s]
100%|██████████| 8/8 [00:00<00:00, 870.23it/s]
[2025-06-21 04:54:40,508][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:40,510][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,511][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,521][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e4.pred.eval.mean.csv
[2025-06-21 04:54:40,522][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e5.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 9061.42it/s]
100%|██████████| 8/8 [00:00<00:00, 850.25it/s]
[2025-06-21 04:54:40,528][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,528][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:40,529][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,530][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
[2025-06-21 04:54:40,541][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e5.pred.eval.mean.csv
[2025-06-21 04:54:40,542][mdl.ntf][INFO] - Evaluating predictions at ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e6.pred ... for {'trec': ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'], 'other': ['skill_coverage_2,5,10', 'aucroc']}
[2025-06-21 04:54:40,546][mdl.ntf][INFO] - ['P_2,5,10', 'recall_2,5,10', 'ndcg_cut_2,5,10', 'map_cut_2,5,10', 'success_2,5,10'] ...
[2025-06-21 04:54:40,546][evl.metric][INFO] - Building pytrec_eval input for 8 instances ...
[2025-06-21 04:54:40,548][mdl.ntf][INFO] - ['aucroc'] and curve values (fpr, tpr) ...
[2025-06-21 04:54:40,549][mdl.ntf][INFO] - ['skill_coverage_2,5,10'] ...
/Users/hfani/Github/fani-lab/OpeNTF/main/src/mdl/ntf.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Y_ = Ntf.torch.load(f'{filename}pred')['y_pred']
100%|██████████| 8/8 [00:00<00:00, 8342.72it/s]
100%|██████████| 8/8 [00:00<00:00, 850.34it/s]
[2025-06-21 04:54:40,560][mdl.ntf][INFO] - Saving file per fold as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/f2.valid.e6.pred.eval.mean.csv
[2025-06-21 04:54:40,562][mdl.ntf][INFO] - Saving mean evaluation file over 3 folds as ../output/dblp/toy.dblp.v12.json/bnn.b128.e10.ns5.lr0.001.h[128, 64, 128].speTrue.lbce.tpw10.tnw1.nsdunigram_b.nmc10/valid.pred.eval.mean.csv

Process finished with exit code 0
